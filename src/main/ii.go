package main

import (
	"os"
	"fmt"
	"mapreduce"
	"strings"
	"unicode"
	"bytes"
	"strconv"
	"sort"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	/*
		params:document为传入文件名, value为传入文件的内容
		1. 将value划分为keyValue数据结构
		2. 塞入res这个KeyValue数组中并返回
	 */
	// 类似于word count, 将所有的单词取出
	values := strings.FieldsFunc(value, func(c rune) bool {
		return !unicode.IsLetter(c)  // 判断是否为字母
	})
	for _, word := range values {
		res = append(res, mapreduce.KeyValue{word, document})
	}
	return res
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	/*
		params: key为单词, values的每个string结构为"词频 document"
		1. 先对values去重
		2. 然后对values进行排序
		3. 遍历values将values作拼接
	 */
	var buffer bytes.Buffer  // 用作字符串拼接

	// values去重
	values = deleteDuplicates(values)
	// 对values排序
	sort.Strings(values)
	size := len(values)  // size也是key出现的总次数

	for index, value := range values {
		//countDocument := strings.Split(value, " ")  // 按照空格分割字符串
		buffer.WriteString(value)  // 每个value都是document文件名
		if index != (size - 1) {
			buffer.WriteString(",")
		}
	}
	return strconv.Itoa(size) + " " +  buffer.String()
}


func deleteDuplicates(values []string) []string {
	var res  []string
	valuesMap := make(map[string]bool)
	for _, v := range values {
		if _, ok := valuesMap[v]; !ok {
			// key不存在则进入此逻辑
			valuesMap[v] = true
			res = append(res, v)
		} else {
			continue
		}
	}
	return res
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
