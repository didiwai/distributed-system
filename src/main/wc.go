package main

import (
	"fmt"
	"mapreduce"
	"os"
	"strings"
	"strconv"
	"unicode"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	/*
		1. 将value划分为keyValue数据结构
		2. 塞入res这个KeyValue数组中并返回
	 */

	// func FieldsFunc(s string, f func(rune) bool) []string 函数原型
	// 通过传入的func判断是否当前字符符合要求
	values := strings.FieldsFunc(value, func(c rune) bool {
		return !unicode.IsLetter(c)  // 判断是否为字母
	})
	for _, v := range values {
		res = append(res, mapreduce.KeyValue{v, "1"})
	}
	return res
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	/*
		1. 得到一个key-values(词频集合)
		2. 对词频集合求总和, 最后将总和发射出去
		ps: Atoi和Itoa, 分别用于 字符串转整数 整数转字符串
	 */
	var sum int
	for _, v := range values {
		intV, err := strconv.Atoi(v)
		if err != nil {
			fmt.Printf("%v make error: %v\n", v, err)
		}
		sum += intV
	}
	return strconv.Itoa(sum)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
